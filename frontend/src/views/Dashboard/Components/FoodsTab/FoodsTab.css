button {
  background-color: red; /* Fondo transparente */
  border: none; /* Eliminar borde */
  padding: 8px 12px;
  font-size: 14px;
  cursor: pointer;
}

/* Estilos adicionales opcionales */
button:hover {
  background-color: #f0f0f0; /* Un fondo sutil al pasar el cursor */
}

.add-food-button {
  background-color: green;
  border: 1px solid #ccc; /* Agregar un borde si es necesario */
  color: black;
}

.add-food-button:hover {
  background-color: #e0e0e0; /* Fondo sutil en hover */
}

.edit-button {
  background-color: blue;
  color: black;
}

.delete-button {
  color: black;
  background-color: red;
}

.pagination {
  margin-top: 20px;
}

.page-button {
  margin: 0 5px;
  padding: 5px 10px;
  background-color: #ddd;
  border: 1px solid #ccc;
  cursor: pointer;
}

.page-button:hover {
  background-color: #bbb;
}

.search-bar {
  margin-bottom: 20px;
  padding: 8px;
  width: 100%;
  max-width: 300px;
}

import React, { useState } from 'react';
import './FoodsTab.css';

const FoodsTab = () => {
  const [foods, setFoods] = useState([]);
  const [editingFood, setEditingFood] = useState(null);  // Estado para el alimento que se edita
  const [foodData, setFoodData] = useState({ name: '', calories: '', protein: '', fat: '', carbs: '' }); // Datos del alimento

  // Función para cargar un alimento en el modal
  const handleEditFood = (food) => {
    setEditingFood(food);  // Establecemos el alimento en edición
    setFoodData({ 
      name: food.name, 
      calories: food.calories, 
      protein: food.protein, 
      fat: food.fat, 
      carbs: food.carbs 
    });  // Cargamos los datos del alimento en los campos de edición
  };

  // Función para manejar la actualización de los campos de edición
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFoodData({ ...foodData, [name]: value });
  };

  // Función para guardar los cambios después de editar
  const handleSaveChanges = () => {
    // Llamada a la API para guardar los cambios
    // Suponiendo que el backend acepte una PUT request para actualizar un alimento
    const updatedFood = { ...editingFood, ...foodData };
    
    // Aquí va la llamada a la API para actualizar el alimento
    // Luego actualizar el estado de los alimentos en la UI
    setFoods((prevFoods) => prevFoods.map(food => food.id === updatedFood.id ? updatedFood : food));
    setEditingFood(null); // Cerrar el modal después de guardar
  };

  return (
    <div className="foods-tab">
      <h2>Foods List</h2>
      {foods.map((food) => (
        <div key={food.id} className="food-item">
          <span>{food.name}</span>
          <button onClick={() => handleEditFood(food)}>Edit</button>
        </div>
      ))}

      {/* Modal de edición */}
      {editingFood && (
        <div className="edit-modal">
          <div className="modal-content">
            <h3>Edit Food</h3>
            <form onSubmit={(e) => e.preventDefault()}>
              <label>Name:</label>
              <input
                type="text"
                name="name"
                value={foodData.name}
                onChange={handleInputChange}
              />

              <label>Calories:</label>
              <input
                type="number"
                name="calories"
                value={foodData.calories}
                onChange={handleInputChange}
              />

              <label>Protein:</label>
              <input
                type="number"
                name="protein"
                value={foodData.protein}
                onChange={handleInputChange}
              />

              <label>Fat:</label>
              <input
                type="number"
                name="fat"
                value={foodData.fat}
                onChange={handleInputChange}
              />

              <label>Carbs:</label>
              <input
                type="number"
                name="carbs"
                value={foodData.carbs}
                onChange={handleInputChange}
              />

              <button type="button" onClick={handleSaveChanges}>Save Changes</button>
              <button type="button" onClick={() => setEditingFood(null)}>Cancel</button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default FoodsTab;


